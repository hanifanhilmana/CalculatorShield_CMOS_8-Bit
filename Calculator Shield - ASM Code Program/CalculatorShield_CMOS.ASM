ORG 00H
NEWNUM EQU P3.0
NEWDIG EQU P3.1
RS EQU P3.5
RW EQU P3.7
row1 bit P2.7
row2 bit P2.6
row3 bit P2.5
row4 bit P2.4
col1 bit P2.3
col2 bit P2.2
col3 bit P2.1
col4 bit P2.0

START:
MOV R0, #38H
ACALL COMMAND
MOV R0, #0EH
ACALL COMMAND
MOV R0, #80H
ACALL COMMAND
MOV R0, #01H
ACALL COMMAND

MOV R4, #00H
MOV P3, #00H
MOV P2, #0EFH
MOV R3, #00H
MOV R1, #00H
MOV R2, #'+' 

L1:
    JNB row4, C1
    JNB row3, C2
    JNB row2, C3
    JNB row1, C4
    SJMP L1

C1:
    JNB col1, JUMP_BUTTON_ON
    JNB col2, JUMP_BUTTON_ZERO
    JNB col3, JUMP_BUTTON_EQUAL
    JNB col4, JUMP_BUTTON_ADD
    SETB row4
    CLR row3
    SJMP L1

C2:
    JNB col1, JUMP_BUTTON_7
    JNB col2, JUMP_BUTTON_8
    JNB col3, JUMP_BUTTON_9
    JNB col4, JUMP_BUTTON_SUBSTRACT
    SETB row3
    CLR row2
    SJMP L1

C3:
    JNB col1, JUMP_BUTTON_4
    JNB col2, JUMP_BUTTON_5
    JNB col3, JUMP_BUTTON_6
    JNB col4, JUMP_BUTTON_MULTIPLY
    SETB row2
    CLR row1
    SJMP L1

C4:
    JNB col1, JUMP_BUTTON_1
    JNB col2, JUMP_BUTTON_2
    JNB col3, JUMP_BUTTON_3
    JNB col4, JUMP_BUTTON_DIVIDE
    SETB row1
    CLR row4
    LJMP L1

JUMP_BUTTON_ON: LJMP BUTTON_ON		
JUMP_BUTTON_ZERO: LJMP BUTTON_ZERO		
JUMP_BUTTON_1: LJMP BUTTON_1			
JUMP_BUTTON_2: LJMP BUTTON_2			
JUMP_BUTTON_3: LJMP BUTTON_3			
JUMP_BUTTON_4: LJMP BUTTON_4			
JUMP_BUTTON_5: LJMP BUTTON_5			
JUMP_BUTTON_6: LJMP BUTTON_6			
JUMP_BUTTON_7: LJMP BUTTON_7			
JUMP_BUTTON_8: LJMP BUTTON_8			
JUMP_BUTTON_9: LJMP BUTTON_9			
JUMP_BUTTON_ADD: LJMP BUTTON_ADD		
JUMP_BUTTON_SUBSTRACT: LJMP BUTTON_SUBSTRACT		
JUMP_BUTTON_MULTIPLY: LJMP BUTTON_MULTIPLY		
JUMP_BUTTON_DIVIDE: LJMP BUTTON_DIVIDE	
JUMP_BUTTON_EQUAL: LJMP BUTTON_EQUAL	

BUTTON_ON: 
    LJMP START

BUTTON_ZERO: 
    MOV R0, #'0'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_EQUAL: 
    MOV R0, #'='
    ACALL DISPLAY
    ACALL RESULT
    LJMP L1

BUTTON_ADD: 
    MOV R0, #'+'
    ACALL OPERATION
    ACALL DISPLAY
    LJMP L1

BUTTON_1: 
    MOV R0, #'1'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_2: 
    MOV R0, #'2'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_3: 
    MOV R0, #'3'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_SUBSTRACT: 
    MOV R0, #'-'
    ACALL OPERATION
    ACALL DISPLAY
    LJMP L1

BUTTON_4: 
    MOV R0, #'4'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_5: 
    MOV R0, #'5'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_6: 
    MOV R0, #'6'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_MULTIPLY: 
    MOV R0, #'*'
    ACALL OPERATION
    ACALL DISPLAY
    LJMP L1

BUTTON_7: 
    MOV R0, #'7'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_8: 
    MOV R0, #'8'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_9: 
    MOV R0, #'9'
    ACALL NUMBER
    ACALL DISPLAY
    LJMP L1

BUTTON_DIVIDE: 
    MOV R0, #'/'
    ACALL OPERATION
    ACALL DISPLAY
    LJMP L1

DISPLAY:
    MOV P1, R0
    SETB RS
    SETB RW
    CLR RW
    ACALL DELAY
    RET

COMMAND:
    MOV P1, R0
    CLR RS
    SETB RW
    CLR RW
    ACALL DELAY
    RET

NUMBER:
    JB NEWNUM, SECONDNUM
    JB NEWDIG, NEWDIGIT
    MOV A, R0
    SUBB A, #30H
    MOV R1, A
    SETB NEWDIG
    RET

NEWDIGIT:
    MOV A, R0
    MOV B, #10D
    SUBB A, #30H
    MOV R7, A
    MOV A, R1
    MUL AB
    MOV R6, B
    CJNE R6, #00H, JUMP_POPED
    ADD A, R7
    JC JUMP_POPED
    MOV R1, A
    SETB NEWDIG
    RET

SECONDNUM:
    JB NEWDIG, NEWDIGIT2
    MOV A, R0
    SUBB A, #30H
    MOV R3, A
    SETB NEWDIG
    RET

NEWDIGIT2:
    MOV A, R0
    MOV B, #10D
    SUBB A, #30H
    MOV R7, A
    MOV A, R3
    MUL AB
    MOV R6, B
    CJNE R6, #00H, JUMP_POPED
    ADD A, R7
    JC JUMP_POPED
    MOV R3, A
    SETB NEWDIG
    RET

OPERATION:
    SETB NEWNUM
    CLR NEWDIG
    MOV A, R0
    MOV R2, A
    RET

RESULT:
    CJNE R2, #'+', SUBSTRACTIONS
    MOV A, R1
    CLR C
    ADD A, R3
    JC JUMP_POPED
    MOV R5, #0H
    MOV R4, A
    LJMP PRINTOUT

SUBSTRACTIONS:
    CJNE R2, #'-', MULTIPLICATION
    MOV A, R1
    CLR C
    SUBB A, R3
    JC JUMP_POPED
    MOV R5, #0H
    MOV R4, A
    LJMP PRINTOUT

MULTIPLICATION:
    CJNE R2, #'*', DIVISION
    MOV A, R1
    MOV B, R3
    MUL AB
    MOV R7, B
    CJNE R7, #0H, POPED
    MOV R5, #0H
    MOV R4, A
    LJMP PRINTOUT

DIVISION:
    MOV A, R1
    MOV B, R3
    DIV AB
    MOV R4, A
    MOV R5, B
    LJMP PRINTOUT

JUMP_POPED:
    LJMP POPED

PRINTOUT:
    CJNE R3, #0D, NORMAL
    CJNE R2, #'/', NORMAL
    MOV R0, #0C0H
    ACALL COMMAND
    MOV DPTR, #ERROR_MSG
    CLR C
    MOV R7, #0D
NEXT:
    MOV A, R7
    MOVC A, @A+DPTR
    MOV R0, A
    ACALL DISPLAY
    INC R7
    JNZ NEXT
    RET

NORMAL:
    MOV R7, #100D
    CLR C
    SUBB A, R7
    JC UNDER100
    MOV A, R4
    MOV B, R7
    DIV AB
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    MOV R4, B
    MOV A, B
    MOV R7, #10D
    MOV B, R7
    DIV AB
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    MOV A, B
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    CJNE R5, #00H, DECIMAL
    RET

UNDER100:
    MOV R7, #10D
    CLR C
    MOV A, R4
    SUBB A, R7
    JC UNDER10
    MOV A, R4
    MOV B, R7
    DIV AB
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    MOV A, B
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    CJNE R5, #00H, DECIMAL
    RET

UNDER10:
    MOV A, R4
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    CJNE R5, #00H, DECIMAL
    RET

POPED:
    MOV R0, #0C0H
    ACALL COMMAND
    MOV DPTR, #ERROR_MSG2
    CLR C
    MOV R7, #0D
NEXT2:
    MOV A, R7
    MOVC A, @A+DPTR
    MOV R0, A
    ACALL DISPLAY
    JZ FIM
    INC R7
    SJMP NEXT2
FIM:
    RET

DECIMAL:
    MOV R0, #'.'
    ACALL DISPLAY
    MOV A, R5
    MOV B, #10D
    MUL AB
    MOV B, R3
    DIV AB
    ADD A, #30H
    MOV R0, A
    ACALL DISPLAY
    RET

DELAY:
    MOV 62, #2
DELAY1:
    MOV 61, #250
DELAY2:
    MOV 60, #250
    DJNZ 60, $
    DJNZ 61, DELAY2
    DJNZ 62, DELAY1
    RET

ERROR_MSG: DB 'ERROR DIV BY 0', 0
ERROR_MSG2: DB 'OVERFLOW!', 0
END